215. Kth Largest Element in an Array
class Solution(object):
    def findKthLargest(self, nums, k):
        def mergeSort(arr):
            sz = len(arr)
            if sz > 1:
                mid = len(arr) // 2
                L = arr[:mid]
                R = arr[mid:]
                mergeSort(L)
                mergeSort(R)
                i = j = k = 0
                a = len(L)
                b = len(R)
                while i < a and j < b:
                    if L[i] < R[j]:
                        arr[k] = L[i]
                        i += 1
                    else:
                        arr[k] = R[j]
                        j += 1
                    k += 1
                while i < a:
                    arr[k] = L[i]
                    i += 1
                    k += 1
                while j < b:
                    arr[k] = R[j]
                    j += 1
                    k += 1
        mergeSort(nums)
        return nums[-k]
        
        
        2. Alternating Characters
        def alternatingCharacters(s):
    b = []
    c = ""+s[0]
    for j in s:
        b.append(j)
    for i in range(1,len(b)):
        if b[i] == b[i-1]:
            continue
        else:
            c = c+b[i]
    return len(s)-len(c)


937. Reorder Data in Log Files
class Solution(object):
    def reorderLogFiles(self, logs):
        let = []
        dig = []
        for i in logs:
            if i.split()[1].isdigit():
                dig.append(i)
            else:
                let.append(i)
        for i in range(len(let)):
            k = let[i].split()
            for j in range(0,len(let)-i-1):
                if let[j][len(k[0]):]>let[j+1][len(k[0]):]:
                    let[j],let[j+1] = let[j+1],let[j]
        return (let+dig)
        

15. 3Sum
a = [-1,0,1,2,-1,-4]
b = []
sz = len(a)
if sz>0:
    for i in range(sz):
        for j in range(i+1, sz):
            for k in range(j+1, sz):
                if a[i]!=a[j]!=a[k] and a[i]+a[j]+a[k]==0:
                    b.append([a[i],a[j],a[k]])
else:
     print('byee')
print(b)

week_2

1 

class Solution(object):
    def checkPalindromeFormation(self, a, b):
        la = len(a)
        lb = len(b)
        if la == lb == 1:
            s1 = "" + b
            s2 = "" + a
            if s1 == s1[::-1] or s2 == s2[::-1]:
                return True
            else:
                return False
        if la == lb:
            i = 0
            while i<la:
                s1 = a[:i] + b[i:]
                s2 = b[:i] + a[i:]
                if s1 == s1[::-1] or s2 == s2[::-1]:
                    return True
                i += 1
            return False
        else:
            return False

1624. Largest Substring Between Two Equal Characters
class Solution(object):
    def maxLengthBetweenEqualCharacters(self, s):
        n = len(s)
        res = -1
        diff = -1
        for i in range(n - 1):
            for j in range(n - 1, i, -1):
                if (s[i] == s[j]):
                    diff = j - i - 1
                    res = max(diff, res)
        return res
